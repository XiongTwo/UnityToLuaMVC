//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaBehaviourWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaBehaviour), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("AddLuaBehaviourLiftCycleFunction", AddLuaBehaviourLiftCycleFunction);
		L.RegFunction("AddLuaBehaviour", AddLuaBehaviour);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AwakeFun", get_AwakeFun, set_AwakeFun);
		L.RegVar("StartFun", get_StartFun, set_StartFun);
		L.RegVar("UpdateFun", get_UpdateFun, set_UpdateFun);
		L.RegVar("OnEnableFun", get_OnEnableFun, set_OnEnableFun);
		L.RegVar("OnDisableFun", get_OnDisableFun, set_OnDisableFun);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLuaBehaviourLiftCycleFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StaticModules.E_MonoBehaviourLiftCycle arg0 = (StaticModules.E_MonoBehaviourLiftCycle)ToLua.CheckObject(L, 1, typeof(StaticModules.E_MonoBehaviourLiftCycle));
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaBehaviour.AddLuaBehaviourLiftCycleFunction(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLuaBehaviour(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			LuaBehaviour.AddLuaBehaviour(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AwakeFun(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaBehaviour.AwakeFun);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StartFun(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaBehaviour.StartFun);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UpdateFun(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaBehaviour.UpdateFun);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnEnableFun(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaBehaviour.OnEnableFun);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDisableFun(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaBehaviour.OnDisableFun);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AwakeFun(IntPtr L)
	{
		try
		{
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			LuaBehaviour.AwakeFun = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StartFun(IntPtr L)
	{
		try
		{
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			LuaBehaviour.StartFun = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UpdateFun(IntPtr L)
	{
		try
		{
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			LuaBehaviour.UpdateFun = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnEnableFun(IntPtr L)
	{
		try
		{
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			LuaBehaviour.OnEnableFun = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDisableFun(IntPtr L)
	{
		try
		{
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			LuaBehaviour.OnDisableFun = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

