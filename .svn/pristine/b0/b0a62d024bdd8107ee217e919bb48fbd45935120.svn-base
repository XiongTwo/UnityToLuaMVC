//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaInterface_LuaStateWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaInterface.LuaState), typeof(LuaInterface.LuaStatePtr));
		L.RegFunction("Start", Start);
		L.RegFunction("OpenLibs", OpenLibs);
		L.RegFunction("BeginPreLoad", BeginPreLoad);
		L.RegFunction("EndPreLoad", EndPreLoad);
		L.RegFunction("AddPreLoad", AddPreLoad);
		L.RegFunction("BeginPreModule", BeginPreModule);
		L.RegFunction("EndPreModule", EndPreModule);
		L.RegFunction("BindPreModule", BindPreModule);
		L.RegFunction("GetPreModule", GetPreModule);
		L.RegFunction("BeginModule", BeginModule);
		L.RegFunction("EndModule", EndModule);
		L.RegFunction("GetClassType", GetClassType);
		L.RegFunction("BeginClass", BeginClass);
		L.RegFunction("EndClass", EndClass);
		L.RegFunction("BeginEnum", BeginEnum);
		L.RegFunction("EndEnum", EndEnum);
		L.RegFunction("BeginStaticLibs", BeginStaticLibs);
		L.RegFunction("EndStaticLibs", EndStaticLibs);
		L.RegFunction("RegFunction", RegFunction);
		L.RegFunction("RegVar", RegVar);
		L.RegFunction("RegConstant", RegConstant);
		L.RegFunction("Get", Get);
		L.RegFunction("GetTranslator", GetTranslator);
		L.RegFunction("GetReflection", GetReflection);
		L.RegFunction("DoString", DoString);
		L.RegFunction("DoFile", DoFile);
		L.RegFunction("Require", Require);
		L.RegFunction("InitPackagePath", InitPackagePath);
		L.RegFunction("AddSearchPath", AddSearchPath);
		L.RegFunction("RemoveSeachPath", RemoveSeachPath);
		L.RegFunction("BeginPCall", BeginPCall);
		L.RegFunction("PCall", PCall);
		L.RegFunction("EndPCall", EndPCall);
		L.RegFunction("PushArgs", PushArgs);
		L.RegFunction("GetFunction", GetFunction);
		L.RegFunction("GetTable", GetTable);
		L.RegFunction("GetLuaThread", GetLuaThread);
		L.RegFunction("GetLuaDelegate", GetLuaDelegate);
		L.RegFunction("AddLuaDelegate", AddLuaDelegate);
		L.RegFunction("CheckTop", CheckTop);
		L.RegFunction("Push", Push);
		L.RegFunction("PushLayerMask", PushLayerMask);
		L.RegFunction("PushByteBuffer", PushByteBuffer);
		L.RegFunction("GetEnumObj", GetEnumObj);
		L.RegFunction("PushValue", PushValue);
		L.RegFunction("PushObject", PushObject);
		L.RegFunction("CheckVector3", CheckVector3);
		L.RegFunction("CheckQuaternion", CheckQuaternion);
		L.RegFunction("CheckVector2", CheckVector2);
		L.RegFunction("CheckVector4", CheckVector4);
		L.RegFunction("CheckColor", CheckColor);
		L.RegFunction("CheckRay", CheckRay);
		L.RegFunction("CheckBounds", CheckBounds);
		L.RegFunction("CheckLayerMask", CheckLayerMask);
		L.RegFunction("CheckLong", CheckLong);
		L.RegFunction("CheckULong", CheckULong);
		L.RegFunction("CheckString", CheckString);
		L.RegFunction("CheckDelegate", CheckDelegate);
		L.RegFunction("CheckCharBuffer", CheckCharBuffer);
		L.RegFunction("CheckByteBuffer", CheckByteBuffer);
		L.RegFunction("CheckObject", CheckObject);
		L.RegFunction("CheckVarObject", CheckVarObject);
		L.RegFunction("CheckObjects", CheckObjects);
		L.RegFunction("CheckLuaFunction", CheckLuaFunction);
		L.RegFunction("CheckLuaTable", CheckLuaTable);
		L.RegFunction("CheckLuaThread", CheckLuaThread);
		L.RegFunction("ToVariant", ToVariant);
		L.RegFunction("CollectRef", CollectRef);
		L.RegFunction("DelayDispose", DelayDispose);
		L.RegFunction("Collect", Collect);
		L.RegFunction("RefreshDelegateMap", RefreshDelegateMap);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("ReLoad", ReLoad);
		L.RegFunction("GetMetaReference", GetMetaReference);
		L.RegFunction("GetMissMetaReference", GetMissMetaReference);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("Equals", Equals);
		L.RegFunction("PrintTable", PrintTable);
		L.RegFunction("New", _CreateLuaInterface_LuaState);
		L.RegVar("this", _this, null);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("translator", get_translator, set_translator);
		L.RegVar("reflection", get_reflection, set_reflection);
		L.RegVar("ArrayMetatable", get_ArrayMetatable, null);
		L.RegVar("DelegateMetatable", get_DelegateMetatable, null);
		L.RegVar("TypeMetatable", get_TypeMetatable, null);
		L.RegVar("EnumMetatable", get_EnumMetatable, null);
		L.RegVar("IterMetatable", get_IterMetatable, null);
		L.RegVar("OutMetatable", get_OutMetatable, null);
		L.RegVar("EventMetatable", get_EventMetatable, null);
		L.RegVar("PackBounds", get_PackBounds, null);
		L.RegVar("UnpackBounds", get_UnpackBounds, null);
		L.RegVar("PackRay", get_PackRay, null);
		L.RegVar("UnpackRay", get_UnpackRay, null);
		L.RegVar("PackRaycastHit", get_PackRaycastHit, null);
		L.RegVar("PackTouch", get_PackTouch, null);
		L.RegVar("LogGC", get_LogGC, set_LogGC);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaInterface_LuaState(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaInterface.LuaState obj = new LuaInterface.LuaState();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaInterface.LuaState.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			object o = obj[arg0];
			ToLua.Push(L, o);
			return 1;

		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj[arg0] = arg1;
			return 0;

		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			obj.Start();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenLibs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			LuaInterface.LuaCSFunction arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (LuaInterface.LuaCSFunction)ToLua.CheckObject(L, 2, typeof(LuaInterface.LuaCSFunction));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(LuaInterface.LuaCSFunction), func) as LuaInterface.LuaCSFunction;
			}

			int o = obj.OpenLibs(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginPreLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			obj.BeginPreLoad();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndPreLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			obj.EndPreLoad();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPreLoad(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(string), typeof(LuaInterface.LuaCSFunction)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaInterface.LuaCSFunction arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (LuaInterface.LuaCSFunction)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(LuaInterface.LuaCSFunction), func) as LuaInterface.LuaCSFunction;
				}

				obj.AddPreLoad(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(string), typeof(LuaInterface.LuaCSFunction), typeof(System.Type)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				LuaInterface.LuaCSFunction arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (LuaInterface.LuaCSFunction)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(LuaInterface.LuaCSFunction), func) as LuaInterface.LuaCSFunction;
				}

				System.Type arg2 = (System.Type)ToLua.ToObject(L, 4);
				obj.AddPreLoad(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaInterface.LuaState.AddPreLoad");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginPreModule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.BeginPreModule(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndPreModule(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(int)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.EndPreModule(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(System.IntPtr), typeof(int)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				System.IntPtr arg0 = (System.IntPtr)LuaDLL.lua_touserdata(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.EndPreModule(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaInterface.LuaState.EndPreModule");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindPreModule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			LuaInterface.LuaCSFunction arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (LuaInterface.LuaCSFunction)ToLua.CheckObject(L, 3, typeof(LuaInterface.LuaCSFunction));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(LuaInterface.LuaCSFunction), func) as LuaInterface.LuaCSFunction;
			}

			obj.BindPreModule(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPreModule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			LuaInterface.LuaCSFunction o = obj.GetPreModule(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginModule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.BeginModule(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndModule(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			obj.EndModule();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClassType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Type o = obj.GetClassType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginClass(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			System.Type arg1 = (System.Type)ToLua.CheckObject(L, 3, typeof(System.Type));
			string arg2 = ToLua.CheckString(L, 4);
			int o = obj.BeginClass(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndClass(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			obj.EndClass();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginEnum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			int o = obj.BeginEnum(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndEnum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			obj.EndEnum();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginStaticLibs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			obj.BeginStaticLibs(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndStaticLibs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			obj.EndStaticLibs();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			LuaInterface.LuaCSFunction arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (LuaInterface.LuaCSFunction)ToLua.CheckObject(L, 3, typeof(LuaInterface.LuaCSFunction));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(LuaInterface.LuaCSFunction), func) as LuaInterface.LuaCSFunction;
			}

			obj.RegFunction(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegVar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			LuaInterface.LuaCSFunction arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (LuaInterface.LuaCSFunction)ToLua.CheckObject(L, 3, typeof(LuaInterface.LuaCSFunction));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(LuaInterface.LuaCSFunction), func) as LuaInterface.LuaCSFunction;
			}

			LuaInterface.LuaCSFunction arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (LuaInterface.LuaCSFunction)ToLua.CheckObject(L, 4, typeof(LuaInterface.LuaCSFunction));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(LuaInterface.LuaCSFunction), func) as LuaInterface.LuaCSFunction;
			}

			obj.RegVar(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegConstant(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(string), typeof(bool)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.RegConstant(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(string), typeof(double)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				double arg1 = (double)LuaDLL.lua_tonumber(L, 3);
				obj.RegConstant(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaInterface.LuaState.RegConstant");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IntPtr arg0 = (System.IntPtr)LuaDLL.lua_touserdata(L, 1);
			LuaInterface.LuaState o = LuaInterface.LuaState.Get(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTranslator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IntPtr arg0 = (System.IntPtr)LuaDLL.lua_touserdata(L, 1);
			LuaInterface.ObjectTranslator o = LuaInterface.LuaState.GetTranslator(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetReflection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IntPtr arg0 = (System.IntPtr)LuaDLL.lua_touserdata(L, 1);
			LuaInterface.LuaReflection o = LuaInterface.LuaState.GetReflection(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			object[] o = obj.DoString(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			object[] o = obj.DoFile(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Require(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			obj.Require(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitPackagePath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			obj.InitPackagePath();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSearchPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddSearchPath(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSeachPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveSeachPath(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginPCall(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.BeginPCall(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PCall(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.PCall(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndPCall(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.EndPCall(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PushArgs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			object[] arg0 = ToLua.CheckObjectArray(L, 2);
			obj.PushArgs(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFunction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(int)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LuaInterface.LuaFunction o = obj.GetFunction(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(string), typeof(bool)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				LuaInterface.LuaFunction o = obj.GetFunction(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaInterface.LuaState.GetFunction");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTable(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(int)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LuaInterface.LuaTable o = obj.GetTable(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(string), typeof(bool)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				LuaInterface.LuaTable o = obj.GetTable(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaInterface.LuaState.GetTable");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLuaThread(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LuaInterface.LuaThread o = obj.GetLuaThread(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLuaDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(LuaInterface.LuaFunction)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				LuaFunction arg0 = ToLua.ToLuaFunction(L, 2);
				LuaInterface.LuaDelegate o = obj.GetLuaDelegate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(LuaInterface.LuaFunction), typeof(LuaInterface.LuaTable)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				LuaFunction arg0 = ToLua.ToLuaFunction(L, 2);
				LuaTable arg1 = ToLua.ToLuaTable(L, 3);
				LuaInterface.LuaDelegate o = obj.GetLuaDelegate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaInterface.LuaState.GetLuaDelegate");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLuaDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(LuaInterface.LuaDelegate), typeof(LuaInterface.LuaFunction)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				LuaInterface.LuaDelegate arg0 = (LuaInterface.LuaDelegate)ToLua.ToObject(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.AddLuaDelegate(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(LuaInterface.LuaDelegate), typeof(LuaInterface.LuaFunction), typeof(LuaInterface.LuaTable)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				LuaInterface.LuaDelegate arg0 = (LuaInterface.LuaDelegate)ToLua.ToObject(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				LuaTable arg2 = ToLua.ToLuaTable(L, 4);
				obj.AddLuaDelegate(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaInterface.LuaState.AddLuaDelegate");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckTop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			bool o = obj.CheckTop();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Push(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(LuaInterface.LuaBaseRef)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				LuaInterface.LuaBaseRef arg0 = (LuaInterface.LuaBaseRef)ToLua.ToObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(System.Array)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				System.Array arg0 = (System.Array)ToLua.ToObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(LuaInterface.LuaByteBuffer)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				LuaByteBuffer arg0 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 2));
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.RaycastHit)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.RaycastHit arg0 = (UnityEngine.RaycastHit)ToLua.ToObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.Touch)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.Touch arg0 = (UnityEngine.Touch)ToLua.ToObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(System.Type)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.Object)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.TrackedReference)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.TrackedReference arg0 = (UnityEngine.TrackedReference)ToLua.ToObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(System.Collections.IEnumerator)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				System.Collections.IEnumerator arg0 = (System.Collections.IEnumerator)ToLua.ToObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(System.Delegate)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				System.Delegate arg0 = (System.Delegate)ToLua.ToObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(System.Enum)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				System.Enum arg0 = (System.Enum)ToLua.ToObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(System.IntPtr)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				System.IntPtr arg0 = (System.IntPtr)LuaDLL.lua_touserdata(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.Vector3)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(string)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(bool)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(double)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.Vector2)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.Ray)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.Bounds)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.Bounds arg0 = ToLua.ToBounds(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.Quaternion)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.Quaternion arg0 = ToLua.ToQuaternion(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.Vector4)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.Vector4 arg0 = ToLua.ToVector4(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(UnityEngine.Color)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LuaInterface.LuaState), typeof(object)))
			{
				LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.Push(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaInterface.LuaState.Push");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PushLayerMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			UnityEngine.LayerMask arg0 = ToLua.ToLayerMask(L, 2);
			obj.PushLayerMask(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PushByteBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.PushByteBuffer(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			System.Enum arg0 = (System.Enum)ToLua.CheckObject(L, 2, typeof(System.Enum));
			object o = obj.GetEnumObj(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PushValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			System.ValueType arg0 = (System.ValueType)ToLua.CheckObject(L, 2, typeof(System.ValueType));
			obj.PushValue(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PushObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.PushObject(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckVector3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 o = obj.CheckVector3(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckQuaternion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Quaternion o = obj.CheckQuaternion(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckVector2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector2 o = obj.CheckVector2(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckVector4(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector4 o = obj.CheckVector4(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Color o = obj.CheckColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckRay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Ray o = obj.CheckRay(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckBounds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Bounds o = obj.CheckBounds(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLayerMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.LayerMask o = obj.CheckLayerMask(arg0);
			ToLua.PushLayerMask(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			long o = obj.CheckLong(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckULong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			ulong o = obj.CheckULong(arg0);
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.CheckString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckDelegate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Delegate o = obj.CheckDelegate(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckCharBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			char[] o = obj.CheckCharBuffer(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckByteBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte[] o = obj.CheckByteBuffer(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Type arg1 = (System.Type)ToLua.CheckObject(L, 3, typeof(System.Type));
			object o = obj.CheckObject(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckVarObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Type arg1 = (System.Type)ToLua.CheckObject(L, 3, typeof(System.Type));
			object o = obj.CheckVarObject(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckObjects(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			object[] o = obj.CheckObjects(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLuaFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LuaInterface.LuaFunction o = obj.CheckLuaFunction(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLuaTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LuaInterface.LuaTable o = obj.CheckLuaTable(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLuaThread(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LuaInterface.LuaThread o = obj.CheckLuaThread(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToVariant(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			object o = obj.ToVariant(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CollectRef(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.CollectRef(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DelayDispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			LuaInterface.LuaBaseRef arg0 = (LuaInterface.LuaBaseRef)ToLua.CheckObject(L, 2, typeof(LuaInterface.LuaBaseRef));
			obj.DelayDispose(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Collect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int o = obj.Collect();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshDelegateMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			obj.RefreshDelegateMap();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			object o = obj[arg0];
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj[arg0] = arg1;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			obj.ReLoad(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMetaReference(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			int o = obj.GetMetaReference(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMissMetaReference(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			int o = obj.GetMissMetaReference(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			obj.Dispose();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
			string arg0 = ToLua.CheckString(L, 2);
			obj.PrintTable(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaState arg0 = (LuaInterface.LuaState)ToLua.ToObject(L, 1);
			LuaInterface.LuaState arg1 = (LuaInterface.LuaState)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_translator(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			LuaInterface.ObjectTranslator ret = obj.translator;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index translator on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_reflection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			LuaInterface.LuaReflection ret = obj.reflection;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index reflection on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ArrayMetatable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.ArrayMetatable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ArrayMetatable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DelegateMetatable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.DelegateMetatable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DelegateMetatable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TypeMetatable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.TypeMetatable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TypeMetatable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnumMetatable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.EnumMetatable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnumMetatable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IterMetatable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.IterMetatable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IterMetatable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OutMetatable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.OutMetatable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OutMetatable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EventMetatable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.EventMetatable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EventMetatable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PackBounds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.PackBounds;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PackBounds on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UnpackBounds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.UnpackBounds;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UnpackBounds on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PackRay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.PackRay;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PackRay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UnpackRay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.UnpackRay;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UnpackRay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PackRaycastHit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.PackRaycastHit;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PackRaycastHit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PackTouch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			int ret = obj.PackTouch;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PackTouch on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogGC(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			bool ret = obj.LogGC;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LogGC on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_translator(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			LuaInterface.ObjectTranslator arg0 = (LuaInterface.ObjectTranslator)ToLua.CheckObject(L, 2, typeof(LuaInterface.ObjectTranslator));
			obj.translator = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index translator on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_reflection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			LuaInterface.LuaReflection arg0 = (LuaInterface.LuaReflection)ToLua.CheckObject(L, 2, typeof(LuaInterface.LuaReflection));
			obj.reflection = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index reflection on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LogGC(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaState obj = (LuaInterface.LuaState)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.LogGC = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LogGC on a nil value" : e.Message);
		}
	}
}

