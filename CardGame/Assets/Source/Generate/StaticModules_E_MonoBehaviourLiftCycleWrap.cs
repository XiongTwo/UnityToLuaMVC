//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class StaticModules_E_MonoBehaviourLiftCycleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(StaticModules.E_MonoBehaviourLiftCycle));
		L.RegVar("Awake", get_Awake, null);
		L.RegVar("Start", get_Start, null);
		L.RegVar("Update", get_Update, null);
		L.RegVar("OnEnable", get_OnEnable, null);
		L.RegVar("OnDisable", get_OnDisable, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Awake(IntPtr L)
	{
		ToLua.Push(L, StaticModules.E_MonoBehaviourLiftCycle.Awake);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Start(IntPtr L)
	{
		ToLua.Push(L, StaticModules.E_MonoBehaviourLiftCycle.Start);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Update(IntPtr L)
	{
		ToLua.Push(L, StaticModules.E_MonoBehaviourLiftCycle.Update);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnEnable(IntPtr L)
	{
		ToLua.Push(L, StaticModules.E_MonoBehaviourLiftCycle.OnEnable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDisable(IntPtr L)
	{
		ToLua.Push(L, StaticModules.E_MonoBehaviourLiftCycle.OnDisable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		StaticModules.E_MonoBehaviourLiftCycle o = (StaticModules.E_MonoBehaviourLiftCycle)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

